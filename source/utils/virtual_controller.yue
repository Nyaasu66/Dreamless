class VirtualController
    new: (config) =>
        assert type(config) == "table" and config.controls, "Invalid Input Config"
        @_controls = {}
        for control, sources in pairs config.controls
            @_controls[control] =
                sources: sources
                rawValue: 0
                value: 0
                down: false
                downPrevious: false
                pressed: false
                released: false
        @_pairs = {}
        for pair, controls in pairs config.pairs
            @_pairs[pair] =
                controls: controls
                rawX: 0
                rawY: 0
                x: 0
                y: 0
                down: false
                downPrevious: false
                pressed: false
                released: false
    set: (keytype, node, config) =>
        assert keytype == "pair" or keytype == "control", "Expecting virtual key type in \"pair\" or \"control\", got #{keytype}"
        if keytype == "control"
            assert @_controls[node], "No controls with name #{node} defined"
            for key, value in pairs config
                @_controls[node][key] = value
        else
            assert @_pairs[node], "No pairs with name #{node} defined"
            for key, value in pairs config
                @_pairs[node][key] = value
    get: (name) =>
        if @_pairs[name]
            if not @disabled
                return @_pairs[name].x, @_pairs[name].y
            return 0, 0
        elseif @_controls[name]
            if not @disabled
                return @_controls[name].value
            return 0
        else
            error "No control with name \"#{name}\" defined"
    released: (name) =>
        if @_pairs[name]
            if not @disabled
                return @_pairs[name].released
            return false
        elseif @_controls[name]
            if not @disabled
                return @_controls[name].released
            return false
        else
            error "No control with name \"#{name}\" defined"
    pressed: (name) =>
        if @_pairs[name]
            if not @disabled
                return @_pairs[name].pressed
            return false
        elseif @_controls[name]
            if not @disabled
                return @_controls[name].pressed
            return false
        else
            error "No control with name \"#{name}\" defined"
    down: (name) =>
        if @_pairs[name]
            if not @disabled
                return @_pairs[name].down
            return false
        elseif @_controls[name]
            if not @disabled
                return @_controls[name].down
            return false
        else
            error "No control with name \"#{name}\" defined"
    getRaw: (...) -> @get(...)
    update: -> nil
